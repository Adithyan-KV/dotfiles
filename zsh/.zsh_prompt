# ##---------------------------------------
# ## THE ZSH PROMPT
# ##---------------------------------------

# # Setting the color palette
BG_COLOR_1=53
BG_COLOR_2=54
BG_COLOR_3=92

BG_COLOR_4=24
BG_COLOR_5=31

#setting it to a random string seems to reset the color :p
RESET_COLOR=gibberish

# ## Setting the glyph to seperate different sections
# # Can have values from https://github.com/ryanoasis/powerline-extra-symbols
SEPERATOR_GLYPH='\Ue0b4'
SEPERATOR_GLYPH_RIGHT='\Ue0b6'

# ## Adds any text to one unit of the prompt
# ## Takes 3 arguments 1.text 2.color_1 3.color_2
# ## No arguments to color_2 will make the end transparent
add_unit(){
    PROMPT+='%K{'$2'}'
    PROMPT+=''$1''
    PROMPT+='%k'
    PROMPT+='%F{'$2'}%K{'$3'}'
    PROMPT+=$(echo $SEPERATOR_GLYPH)
    PROMPT+='%f'
}

# Similar to add_unit but adds to right side prompt
add_unit_right(){
    RPROMPT+='%K{'$2'}%F{'$3'}'
    RPROMPT+=$(echo $SEPERATOR_GLYPH_RIGHT)
    RPROMPT+='%F{'$2'}%K{'$3'}'
    RPROMPT+='%f'  
    RPROMPT+=''$1''
    RPROMPT+='%k'
}

# # Get the name of the branch if there is one. Otherwise get nothing. Name of branch
# # preceded by a branch icon
get_git_branch() {
	#if stderror occurs (no git branch) get rid of the value
	#else return the branch name with * attached to it, i.e current branch
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

get_git_status(){
    status_string=''
    num_unstaged=$(get_num_unstaged)
    num_staged=$(get_num_staged)
    num_commits=$(get_num_committed)
    if [[ -n $num_unstaged ]];then
        status_string+=' ﬒'$num_unstaged' '
    fi
    if [[ -n $num_staged ]];then
        status_string+=''$num_staged' '
    fi
    if [[ -n $num_commits ]];then
        status_string+=''$num_commits' '
    fi
    echo $status_string
}

# Files not yet added
get_num_unstaged(){
    echo $(git diff --cached --numstat|wc -l)
}

# Files added and ready to be commited
get_num_staged(){
    git diff --numstat|wc -l
}

# Files commited but not pushed
get_num_committed(){
    git cherry|wc -l
}

# #if virtualenv exists, echo name of virtualenv
get_virtualenv () {
  if test -z $VIRTUAL_ENV ; then
      venv=''
  else
      venv=`basename $VIRTUAL_ENV`
      venv=$venv
  fi
  echo $venv
}

## Setting the prompt
# ------------------------------------------

## LEFT PROMPT
##------------

# Use bold text for prompt
PROMPT='%B'

add_unit '  ' $BG_COLOR_1 $BG_COLOR_2                     #Arch logo
# add_unit '  %n' $BG_COLOR_2 $BG_COLOR_3                  #Username
add_unit '  %1~ ' $BG_COLOR_2 $RESET_COLOR                #Partial file path

# Ending bold and reseting colors
PROMPT+=' %b%k%f'

## RIGHT PROMPT
##-------------

##to disable the prompt that python virtualenv adds by default
VIRTUAL_ENV_DISABLE_PROMPT='1'

# Function that sets the right prompt. No right prompt is displayed if no venv or 
# git directory is detected in pwd
set_right_prompt(){
    RPROMPT='%B'
    branch=$(get_git_branch)
    if [[ -n $branch ]];then
        git_string=$branch$(get_git_status)
    fi
    # echo $git_string
    venv=$(get_virtualenv)
    if [[ -n $branch ]]&&[[ -n $venv ]];then
        add_unit_right ' $git_string' $RESET_COLOR $BG_COLOR_4
        add_unit_right ' $venv ' $BG_COLOR_4 $BG_COLOR_5
    elif [[ -n $branch ]];then
        add_unit_right ' $git_string' $RESET_COLOR $BG_COLOR_4
    elif [[ -n $venv ]];then
        add_unit_right ' $venv ' $RESET_COLOR $BG_COLOR_5
    else
        RPROMPT=''
    fi
}
RPROMPT+='%b%k%f'
# Add the function to precmd_functions so that it is executed everytime the prompt
# refreshes
precmd_functions+=(set_right_prompt)


